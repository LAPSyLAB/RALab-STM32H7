
stm32h7-asm_RA_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000012c  24000298  24000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  240003c4  240003c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  240003c4  240003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  240003c8  240003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  240003cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000014  240003e0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  240003e0  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   000000fe  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00000048  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000026  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000048  00000000  00000000  000201b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000008a  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000020  00000000  00000000  00020288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000094  00000000  00000000  000202a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000014 	.word	0x20000014
240002b4:	00000000 	.word	0x00000000
240002b8:	240003ac 	.word	0x240003ac

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	20000018 	.word	0x20000018
240002d4:	240003ac 	.word	0x240003ac

240002d8 <main>:
  .type  main, %function
  .global main

   	   	.align
main:
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
240002d8:	481c      	ldr	r0, [pc, #112]	; (2400034c <LOOP+0xa>)
  		ldr r1, [r0]    // Vsebina iz naslova v r0 -> r1
240002da:	6801      	ldr	r1, [r0, #0]

  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
240002dc:	481c      	ldr	r0, [pc, #112]	; (24000350 <LOOP+0xe>)
  		ldr r2, [r0]	// Vsebina iz naslova v r0 -> r2
240002de:	6802      	ldr	r2, [r0, #0]

  		add r3,r1,r2    // r1 + r2 -> r3
240002e0:	eb01 0302 	add.w	r3, r1, r2

  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
240002e4:	481b      	ldr	r0, [pc, #108]	; (24000354 <LOOP+0x12>)
  		str r3,[r0]		// iz registra r3 -> na naslov v r0
240002e6:	6003      	str	r3, [r0, #0]

	    bl 	INIT_IO     // Priprava za kontrolo LED diode
240002e8:	f000 f80e 	bl	24000308 <INIT_IO>

240002ec <loop>:

loop:
		bl LED_ON       // Vklop LED diode
240002ec:	f000 f81a 	bl	24000324 <LED_ON>

		mov r0,#500
240002f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		bl DELAY	 	// Zakasnitev: r0 x 1msec
240002f4:	f000 f822 	bl	2400033c <DELAY>

		bl LED_OFF      // Izlop LED diode
240002f8:	f000 f81a 	bl	24000330 <LED_OFF>

		mov r0,#500
240002fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		bl DELAY	 	// Zakasnitev: r0 x 1msec
24000300:	f000 f81c 	bl	2400033c <DELAY>

		b loop          // skok na vrstico loop:
24000304:	e7f2      	b.n	240002ec <loop>

24000306 <__end>:


__end: 	b 	__end
24000306:	e7fe      	b.n	24000306 <__end>

24000308 <INIT_IO>:



INIT_IO:
  	push {r5, r6, lr}
24000308:	b560      	push	{r5, r6, lr}

	// Enable GPIOI Peripheral Clock (bit 8 in AHB4ENR register)
	ldr r6, = RCC_AHB4ENR       // Load peripheral clock reg address to r6
2400030a:	4e13      	ldr	r6, [pc, #76]	; (24000358 <LOOP+0x16>)
	ldr r5, [r6]                // Read its content to r5
2400030c:	6835      	ldr	r5, [r6, #0]
	orr r5, #0x00000100          // Set bit 8 to enable GPIOI clock
2400030e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
	str r5, [r6]                // Store result in peripheral clock register
24000312:	6035      	str	r5, [r6, #0]

	// Make GPIOI Pin13 as output pin (bits 27:26 in MODER register)
	ldr r6, =GPIOI_BASE       // Load GPIOD BASE address to r6
24000314:	4e11      	ldr	r6, [pc, #68]	; (2400035c <LOOP+0x1a>)
	ldr r5, [r6,#GPIOx_MODER]  // Read GPIOD_MODER content to r5
24000316:	6835      	ldr	r5, [r6, #0]
	and r5, #0xF3FFFFFF          // Clear bits 27-26 for P13
24000318:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
	orr r5, #0x04000000          // Write 01 to bits 27-26 for P13
2400031c:	f045 6580 	orr.w	r5, r5, #67108864	; 0x4000000
	str r5, [r6]                // Store result in GPIO MODER register
24000320:	6035      	str	r5, [r6, #0]

  	pop {r5, r6, pc}
24000322:	bd60      	pop	{r5, r6, pc}

24000324 <LED_ON>:



LED_ON:
    push {r5, r6, lr}
24000324:	b560      	push	{r5, r6, lr}
	// Set GPIOx Pins to 0 (through BSSR register)
	ldr    r6, =GPIOI_BASE       // Load GPIOI BASE address to r6
24000326:	4e0d      	ldr	r6, [pc, #52]	; (2400035c <LOOP+0x1a>)
	mov    r5, #LEDs_ON
24000328:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	str    r5, [r6,#GPIOx_BSSR] // Write to BSRR register
2400032c:	61b5      	str	r5, [r6, #24]
  	pop {r5, r6, pc}
2400032e:	bd60      	pop	{r5, r6, pc}

24000330 <LED_OFF>:

LED_OFF:
    push {r5, r6, lr}
24000330:	b560      	push	{r5, r6, lr}
	// Set GPIOx Pins to 1 (through BSSR register)
	ldr    r6, =GPIOI_BASE       // Load GPIOI BASE address to r6
24000332:	4e0a      	ldr	r6, [pc, #40]	; (2400035c <LOOP+0x1a>)
	mov    r5, #LEDs_OFF
24000334:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	str    r5, [r6,#GPIOx_BSSR] // Write to BSRR register
24000338:	61b5      	str	r5, [r6, #24]
  	pop {r5, r6, pc}
2400033a:	bd60      	pop	{r5, r6, pc}

2400033c <DELAY>:


// Delay with internal SW loop approx. r0 x ms
DELAY:
    push {r1, lr}
2400033c:	b502      	push	{r1, lr}

2400033e <MSEC>:

MSEC: ldr r1,=LEDDELAY
2400033e:	f44f 417a 	mov.w	r1, #64000	; 0xfa00

24000342 <LOOP>:
LOOP:    subs r1, r1, #1
24000342:	3901      	subs	r1, #1
         bne LOOP
24000344:	d1fd      	bne.n	24000342 <LOOP>

      subs r0, r0, #1
24000346:	3801      	subs	r0, #1
      bne MSEC
24000348:	d1f9      	bne.n	2400033e <MSEC>
    pop {r1, pc}
2400034a:	bd02      	pop	{r1, pc}
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
2400034c:	20000004 	.word	0x20000004
  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
24000350:	20000008 	.word	0x20000008
  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
24000354:	2000000c 	.word	0x2000000c
	ldr r6, = RCC_AHB4ENR       // Load peripheral clock reg address to r6
24000358:	580244e0 	.word	0x580244e0
	ldr r6, =GPIOI_BASE       // Load GPIOD BASE address to r6
2400035c:	58022000 	.word	0x58022000

24000360 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
24000360:	f8df d02c 	ldr.w	sp, [pc, #44]	; 24000390 <LoopFillZerobss+0xa>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
24000364:	480b      	ldr	r0, [pc, #44]	; (24000394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
24000366:	490c      	ldr	r1, [pc, #48]	; (24000398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
24000368:	4a0c      	ldr	r2, [pc, #48]	; (2400039c <LoopFillZerobss+0x16>)
  movs r3, #0
2400036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
2400036c:	e002      	b.n	24000374 <LoopCopyDataInit>

2400036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
2400036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24000372:	3304      	adds	r3, #4

24000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
24000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
24000378:	d3f9      	bcc.n	2400036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
2400037a:	4a09      	ldr	r2, [pc, #36]	; (240003a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
2400037c:	4c09      	ldr	r4, [pc, #36]	; (240003a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
2400037e:	2300      	movs	r3, #0
  b LoopFillZerobss
24000380:	e001      	b.n	24000386 <LoopFillZerobss>

24000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24000384:	3204      	adds	r2, #4

24000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
24000388:	d3fb      	bcc.n	24000382 <FillZerobss>

/* Call the application's entry point.*/
//eternal:  b  eternal
  bl  main
2400038a:	f7ff ffa5 	bl	240002d8 <main>
  bx  lr
2400038e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
24000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
24000398:	20000014 	.word	0x20000014
  ldr r2, =_sidata
2400039c:	240003cc 	.word	0x240003cc
  ldr r2, =_sbss
240003a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
240003a4:	20000030 	.word	0x20000030

240003a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
240003a8:	e7fe      	b.n	240003a8 <ADC3_IRQHandler>
	...

240003ac <_init>:
240003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240003ae:	bf00      	nop
240003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
240003b2:	bc08      	pop	{r3}
240003b4:	469e      	mov	lr, r3
240003b6:	4770      	bx	lr

240003b8 <_fini>:
240003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240003ba:	bf00      	nop
240003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
240003be:	bc08      	pop	{r3}
240003c0:	469e      	mov	lr, r3
240003c2:	4770      	bx	lr
